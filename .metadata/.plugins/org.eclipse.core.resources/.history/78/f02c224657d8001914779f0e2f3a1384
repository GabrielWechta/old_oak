package com.harman.database;

import java.util.Arrays;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

@Service("userDetailsService")
public class UserDetailsServiceImpl implements UserDetailsService {
    private static final Logger log = LoggerFactory.getLogger(UserDetailsServiceImpl.class);
    
    @Autowired
    private EmployeeRepository employeeRepository;
    
    @Autowired
    private final BCryptPasswordEncoder bCryptPasswordEncoder;
    
    @Transactional(readOnly = true)
    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        Employee employee = employeeRepository.findByusername(username);
        
        if (employee == null) {
        	log.info("++++++++++++++++++++++++++++++++++++++++WRONG+++++++++++++++++++++++++++++++++++++++");
            throw new UsernameNotFoundException("Employee not found.");
        }
        
        log.info("loadUserByUsername() : {}", username);
        log.info("loadUserByUsername() : {}", employee.getUsername());
        log.info("loadUserByUsername() : {}", employee.getPassword());

        return new org.springframework.security.core.userdetails.User(employee.getId(), employee.getPassword(), getAuthority());
        //(UserDetails) 
    }
	private List getAuthority() {
		return Arrays.asList(new SimpleGrantedAuthority("ROLE_USER"));
	}
	//@overide
	public Employee registerNewUserAccount(UserDto accountDto) {
	  
	    Employee employee = new Employee();
	 
	    employee.setUsername(accountDto.getUsername());
	    employee.setPassword(passwordEncoder.encode(accountDto.getPassword()));
	    employee.setEmail(accountDto.getEmail());
	 
	    employee.setRoles(Arrays.asList(roleRepository.findByName("ROLE_employee")));
	    return repository.save(employee);
	}

}
