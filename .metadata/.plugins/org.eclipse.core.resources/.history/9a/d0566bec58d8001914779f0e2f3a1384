package com.harman.web_security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.harman.LoginView;
import com.harman.database.UserDetailsServiceImpl;
import com.harman.web_service.CustomRequestCache;

@EnableWebSecurity
@Configuration
public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
//	@Autowired
//	private UserDetailsService userDetailsService;
	@Autowired
    private BCryptPasswordEncoder bCryptPasswordEncoder;


	private static final String LOGIN_PROCESSING_URL = "/login";
	private static final String LOGIN_FAILURE_URL = "/login?error"; 
	private static final String LOGIN_URL = "/login";
	private static final String LOGOUT_SUCCESS_URL = "/login";
	private static final String SIGN_UP_URL = "/users";
//	@Autowired
//	  public SecurityConfiguration(UserDetailsService userDetailsService, BCryptPasswordEncoder bCryptPasswordEncoder) {
//	        this.userDetailsService = userDetailsService;
//	        this.bCryptPasswordEncoder = bCryptPasswordEncoder;
//	    }
    
	 @Override
	   public void configure(AuthenticationManagerBuilder auth) throws Exception {
	       auth.userDetailsService(userDetailsService()).passwordEncoder(bCryptPasswordEncoder);
	   }
	  
	@Bean
	@Override
	public AuthenticationManager authenticationManagerBean() throws Exception { 
	    return super.authenticationManagerBean();
	}

	@Bean
	public CustomRequestCache requestCache() {
	     return new CustomRequestCache();
	}

	@Bean
	@Override
	public UserDetailsService userDetailsService() {
		return new UserDetailsServiceImpl();
	}
			
//		UserDetails user =
//				User.withUsername("user")
//						.password("{noop}password")
//						.roles("USER")
//						.build();
//
//		return new InMemoryUserDetailsManager(user);
	
//	 @Override
//	    public void configure(AuthenticationManagerBuilder auth) throws Exception {
//	        auth.userDetailsService(userDetailsService).passwordEncoder(bCryptPasswordEncoder);
//	    }
	 
	@Override
	protected void configure(HttpSecurity http) throws Exception {
	    // Not using Spring CSRF here to be able to use plain HTML for the login page
	    http.csrf().disable()

	            // Register our CustomRequestCache that saves unauthorized access attempts, so
	            // the user is redirected after login.
	            .requestCache().requestCache(new CustomRequestCache()) 

	            // Restrict access to our application.
	            .and().authorizeRequests().antMatchers(HttpMethod.POST, SIGN_UP_URL)
    			.permitAll()

	            // Allow all flow internal requests.
	            .requestMatchers(SecurityUtils::isFrameworkInternalRequest).permitAll()

	            // Allow all requests by logged in users.
	            //.anyRequest().authenticated()

	            // Configure the login page.
	            .and().formLogin().loginPage("/" + LoginView.ROUTE).usernameParameter("username").passwordParameter("password").permitAll()
	            .failureUrl(LOGIN_FAILURE_URL)

	            // Configure logout
	            .and().logout().logoutSuccessUrl(LOGOUT_SUCCESS_URL)
	    
	            // Allow h2-console
	    		.and().headers().frameOptions().disable();
	}
	
	@Override
	public void configure(WebSecurity web) throws Exception {
		web.ignoring().antMatchers(
				"/VAADIN/**",
				"/favicon.ico",
				"/robots.txt",
				"/manifest.webmanifest",
				"/sw.js",
				"/offline-page.html",
				"/frontend/**",
				"/webjars/**",
				"/frontend-es5/**",
				"/frontend-es6/**");
	}
}
